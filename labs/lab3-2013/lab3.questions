1
        1. Define the rotation matrix early in the display function
           and use it in the matrix multiplication afterwards. You need
           to separate the initial rotations with the time-dependent ones
        2. First translate, then rotate     
        3. Make it interactive, mouse, keyboard or read from file

2
        1. Keyboard controller, changing the camera position and the 
           wind
        2. Yes, the other matrices can be affected as well
       
3
        1. We made a copy of cam_Matrix and set the rightmost column to 0 0 0 1
           And uploaded it as camMatrix
        2. We made a function to draw an object with a texture, and a model to world matrix. 
           For a "real" application we would probably use an object or struct.
        3. No, the skybox should not have lighting effects.
4
        1. eye = normalize(outPositionCam); where outpositioncam is the coordinates of the object in view-coordinates. Note that the translation part of the view-matrix is considered.
        2. Normal vector, outPosition and OutPositionCam because they are interpolated over every pixel.
5
        1. Applied lighting as before. Combined the textures before lighing calculations.
        2. Checking the x-component of the normal in model-coordinates.
