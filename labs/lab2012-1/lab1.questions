1.
        1. In the middle of the window
        2. X-axis is pointing to the right, Y-axis is pointing up
        3. Maybe. Set a variable in the main program that indicates the wanted color. Then 
                associate this variable with the out_color in the fragment shader.
2.
        1. The uniform modifier indicates that the value is constant over the entire polygon
           The in and out modifiers indicate that the value is an in or out value.
        2. No value with the out modifier is set, but is sets the global variable gl_Position
        3. The glUniformMatrix4fv sends a matrix to the shader programs. The 4 means a 4x4 matrix is 
                sent, the f means that the values in the matrix are of type float and the 
                v means that a vector is sent.
3. 
        1. It marks the window as needing to be redisplayed.
        2. Approx 500 Hz (1/(20 ms))
        3. Yes, but it disappeared when we used the double buffering.
4.
        1. We added a colorBufferObjID and made the vertexArrayObjID 2
           items long (vertexBufferObjID, colorBufferObjID).
           We changed the shaders as well, added in_Color to the vertex       
           shader as input and Color as output to the fragment shader
           and Color to the fragment.
        2. out from vertex shader is in (input) to the fragment shader.
        3. 
5. 
        1. Many coordinates to define, thinking geometrically. That we had to change glDrawArrays
        2. With a rotation matrix
6.
        1. To know the orientation of the polygon, used for e.g. lightning effects.
        2. Applied the normal as rgb value for every polygon
        3. Yes, we can't think of any exceptions.
        4. glBindBuffer binds the specified buffer object to the specified buffer, e.g. bind bunnyVertexBufferObjID to GL_ARRAY_BUFFER
           glBufferData initializes a data store in the buffer and indicates what data that is to be stored there. 
7.
       1. We implemented the light calculations in the fragment shader. So it is Phong shading.
       2. out_Color and gl_Position must be vec4. Vertices, light source and normal vectors can be vec3.
8.
       1. The difference was very small in this case.
       2. Performance-wise Gouraud shading is better because only the shading on the vertices are calculated as opposed to 
          every pixel in Phong shading. In Gouraud shading the color for every pixel is interpolated from the vertices.
